#!/usr/bin/expect -f

# Real user interaction test for Case 2
spawn node dist/cli.js

# Test 1: Should show Config Screen 1 (Provider selection)
expect {
  timeout 5
  "Select your provider:"
}

puts "\nâœ… SUCCESS: Shows Screen 1 - Provider Selection"

# Verify all 3 providers are present
expect {
  timeout 2
  "1. anthropic"
}
expect {
  timeout 2
  "2. openai"
}
expect {
  timeout 2
  "3. generic-chat-completion-api"
}

puts "\nâœ… SUCCESS: All 3 providers displayed correctly"

# Verify navigation hint
expect {
  timeout 2
  "â†‘/â†“ choose âšˆ enter accept âšˆ ctrl + c to exit"
}

puts "\nâœ… SUCCESS: Navigation hint matches spec"

# Test 2: Test arrow navigation
send "\033\[B"
expect {
  timeout 2
  "â–¶  2. openai"
}

puts "\nâœ… SUCCESS: Arrow navigation works - selected openai"

# Test 3: Test enter to go to Screen 2
send "\r"
expect {
  timeout 5
  "Enter your model:"
}

puts "\nâœ… SUCCESS: Press Enter - Moved to Screen 2 - Model Input"

# Verify Screen 2 elements
expect {
  timeout 2
  "Enter your model..."
}
expect {
  timeout 2
  "esc back âšˆ ctrl + c to exit"
}

puts "\nâœ… SUCCESS: Screen 2 UI matches spec"

# Test 4: Type model name
send "gpt-4-turbo\r"
expect {
  timeout 3
  "gpt-4-turbo"
}

puts "\nâœ… SUCCESS: Model input works - typed 'gpt-4-turbo'"

# Test 5: Press Enter to go to Screen 3
send "\r"
expect {
  timeout 5
  "Enter your base url:"
}

puts "\nâœ… SUCCESS: Press Enter - Moved to Screen 3 - Base URL Input"

# Verify Screen 3 elements
expect {
  timeout 2
  "Enter your base url..."
}
expect {
  timeout 2
  "esc back âšˆ ctrl + c to exit"
}

puts "\nâœ… SUCCESS: Screen 3 UI matches spec"

# Test 6: Type base URL
send "https://api.openai.com/v1\r"
expect {
  timeout 3
  "https://api.openai.com/v1"
}

puts "\nâœ… SUCCESS: Base URL input works - typed 'https://api.openai.com/v1'"

# Test 7: Press Enter to go to Screen 4
send "\r"
expect {
  timeout 5
  "Enter your api key:"
}

puts "\nâœ… SUCCESS: Press Enter - Moved to Screen 4 - API Key Input"

# Verify Screen 4 elements
expect {
  timeout 2
  "Enter your api key..."
}
expect {
  timeout 2
  "this will be written to the global configuration file:"
}
expect {
  timeout 2
  "~/.codeh/configs.json"
}
expect {
  timeout 2
  "esc back âšˆ ctrl + c to exit"
}

puts "\nâœ… SUCCESS: Screen 4 UI matches spec"
puts "âœ… SUCCESS: File notification displayed correctly"

# Test 8: Type API key
send "sk-RealUserTestKey-123456789\r"
expect {
  timeout 3
  "sk-RealUserTestKey-123456789"
}

puts "\nâœ… SUCCESS: API Key input works - typed 'sk-RealUserTestKey-123456789'"

# Test 9: Press Enter to save configuration
send "\r"
expect {
  timeout 5
  "CodeH CLI - Home"
}

puts "\nðŸŽ‰ SUCCESS: Press Enter - Saved config and redirected to HOME screen!"

# Test 10: Verify we're in HOME screen
expect {
  timeout 2
  ">"
}

puts "\nâœ… SUCCESS: User input field is ready"

# Test 11: Verify configuration was saved
spawn ls -la ~/.codeh/configs.json
expect {
  timeout 3
  ".codeh"
}

puts "\nâœ… SUCCESS: Configuration file ~/.codeh/configs.json created!"

# Test 12: Display final status
puts "\nðŸŽ‰ðŸŽ‰ðŸŽ‰ CASE 2 REAL USER INTERACTION TEST PASSED! ðŸŽ‰ðŸŽ‰ðŸŽ‰"
puts "âœ… SCREEN 1: Provider selection - WORKS PERFECTLY"
puts "âœ… SCREEN 2: Model input - WORKS PERFECTLY"
puts "âœ… SCREEN 3: Base URL input - WORKS PERFECTLY"
puts "âœ… SCREEN 4: API Key input & Save - WORKS PERFECTLY"
puts "âœ… FILE PERSISTENCE: ~/.codeh/configs.json created"
puts "âœ… FINAL REDIRECT: Successfully redirected to HOME screen"
puts "âœ… USER READY: Can now interact with the AI assistant"

exit 0