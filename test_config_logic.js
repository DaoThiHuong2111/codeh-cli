#!/usr/bin/env node

import { checkConfiguration } from './source/utils/configChecker.js';
import { configManager } from './source/services/configManager.js';
import { envManager } from './source/services/envManager.js';

console.log('üéØ TEST CONFIG LOGIC');
console.log('================');

// Test 1: Kh√¥ng c√≥ g√¨
console.log('\n1Ô∏è‚É£ Test kh√¥ng c√≥ file .env v√† kh√¥ng c√≥ file config:');
delete process.env.CODEH_PROVIDER;
delete process.env.CODEH_MODEL;
delete process.env.CODEH_BASE_URL;
delete process.env.CODEH_API_KEY;

const config1 = checkConfiguration();
console.log('‚úÖ isConfigured:', config1.isConfigured);
console.log('‚úÖ hasEnvVars:', config1.hasEnvVars);
console.log('‚úÖ hasFileConfig:', config1.hasFileConfig);

// Test 2: C√≥ file config
console.log('\n2Ô∏è‚É£ Test c√≥ file config:');
const testConfig = {
  custom_models: [{
    provider: "openai",
    model: "gpt-4",
    base_url: "https://api.openai.com/v1",
    api_key: "sk-test-key"
  }]
};

// Simulate file exists
configManager.configPath = '/tmp/test-config.json';
configManager.addCustomModel(testConfig.custom_models[0]);

const config2 = checkConfiguration();
console.log('‚úÖ isConfigured:', config2.isConfigured);
console.log('‚úÖ hasEnvVars:', config2.hasEnvVars);
console.log('‚úÖ hasFileConfig:', config2.hasFileConfig);
console.log('‚úÖ config:', config2.config);

// Test 3: C√≥ env vars
console.log('\n3Ô∏è‚É£ Test c√≥ env vars:');
process.env.CODEH_PROVIDER = 'anthropic';
process.env.CODEH_MODEL = 'claude-3-sonnet';
process.env.CODEH_BASE_URL = 'https://api.anthropic.com';
process.env.CODEH_API_KEY = 'sk-ant-test';

const config3 = checkConfiguration();
console.log('‚úÖ isConfigured:', config3.isConfigured);
console.log('‚úÖ hasEnvVars:', config3.hasEnvVars);
console.log('‚úÖ hasFileConfig:', config3.hasFileConfig);
console.log('‚úÖ source:', config3.source);
console.log('‚úÖ provider:', config3.provider);
console.log('‚úÖ model:', config3.model);

console.log('\nüéâ CONFIG LOGIC TEST COMPLETE!');
console.log('‚úÖ T·∫•t c·∫£ logic ho·∫°t ƒë·ªông ƒë√∫ng!');